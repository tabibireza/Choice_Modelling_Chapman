# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
View(cbc.df)
length(unique(cbc.df$resp.id))
length((unique(cbc.df$ques)))
length((unique(cbc.df$seat)))
length((unique(cbc.df$cargo)))
length((unique(cbc.df$carpool)))
length((unique(cbc.df$alt)))
summary(cbc.df)
# conjoint data entry
attrib <- list(seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
View(attrib)
View(cbc.df)
coef.names <- NULL
for (a in seq_along(attrib)){
coef.names <- c(coef.names,
paste(names(attrib)[a],attrib[[a]][-1], sep=""))
}
coef.names
names(attrib)
seq_along(attrib)
attrib[[1]]
attrib[[1]][-1]
attrib[1]
View(attrib)
View(attrib)
View(cbc.df)
# simulated data
mu <- c(-1, -1, 0.5, -1, -2, -1, -2)
mu <- c(-1, -1, 0.5, -1, -2, -1, -2)
names(mu) <- coef.names
mu
# own unique part worth coefficients follow multivariate normal distribution
Sigma <- diag(c(0.3,1,0.1,0.3,1,0.2,0.3))
View(Sigma)
dimnames(Sigma) <- list(coef.names, coef.names)
View(Sigma)
Sigma["enghyb", "engelec"] <- Sigma["enghyb", "engelec"] <- 0.3
View(Sigma)
# each respondentâ€™s part worth coefficients
set.seed(33040)
resp.id <- 1:200 # respondent ids
carpool <- sample(c("yes","no"), size = length(resp.id), replace = TRUE, prob=c(0.3,0.7))
carpool
? mvrnorm
library(MASS)
? mvrnorm
coefs <-mvrnorm(length(resp.id), mu=mu, Sigma = Sigma)
View(coefs)
colnames(coefs) <- coef.names
View(coefs)
View(coefs)
# the part worths for respondents who use the minivan
coefs[carpool=="yes","seat8"] <- coefs[carpool=="yes","seat8"]+2
coefs[carpool=="yes","seat7"] <- coefs[carpool=="yes","seat7"]+1.5
View(coefs)
coefs[carpool=="yes"]
head(cbind(carpool, coefs))
# ready to generate our survey questions
nques <- 15
nalt <- 3
# ready to generate our survey questions
nques <- 15
nalt <- 3
profiles <- expand.grid(attrib)
nrow(profiles)
head(profiles)
View(profiles)
? expand.grid
View(attrib)
# convert profiles to dummy coding
profiles.coded <- model.matrix(~ seat+cargo+eng+price,data = profiles)[,-1]
head(profiles.coded)
View(profiles.coded)
View(profiles)
cbc1.df <- data.frame(NULL)
for (i in seq_along(resp.id)) {
profiles.i <- sample(1:nrow(profiles), size=nques*nalt)
utility <- profiles.coded[profiles.i, ] %*% coefs[i, ]
wide.util <- matrix(data=utility, ncol=nalt, byrow=TRUE)
probs <- exp(wide.util) / rowSums(exp(wide.util))
choice <- apply(probs, 1, function(x) sample(1:nalt, size=1, prob=x))
choice <- rep(choice, each=nalt)==rep(1:nalt, nques)
conjoint.i <- data.frame(resp.id=rep(i, nques),
ques = rep(1:nques, each=nalt),
alt = rep(1:nalt, nques),
carpool = rep(carpool[i], nques),
profiles[profiles.i, ],
choice = as.numeric(choice))
cbc1.df <- rbind(cbc.df, conjoint.i)
}
View(cbc1.df)
rm(a, i, resp.id, carpool, mu, Sigma, coefs, coef.names,
conjoint.i, profiles, profiles.i, profiles.coded, utility,
wide.util, probs, choice, nalt, nques)
}
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
cbc.df %>% group_by(resp.id) %>% count()
cbc.df %>% count() %>%  group_by(resp.id)
clonames(cbc.df)
colnames(cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
lrtest(m1,m2)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
# interpreting the result
# WTP
coef(m3)["cargo3ft"]/(-coef(m3)["as.numeric(as.character(price))"]/1000)
# Predicting shares
predict.mnl <- function(model, data) {
# Function for predicting shares from a multinomial logit model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
# predict shares. Same format as the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility <- data.model%*%model$coef
share <- exp(utility)/sum(exp(utility))
cbind(share, data)
}
attrib <- list(seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
# creat designs
new.data <- expand.grid(attrib)[c(8, 1, 3, 41, 49, 26), ]
# choose
predict.mnl(m3, new.data)
View(new.data)
expand.grid(attrib)
# choose
predict.mnl(m3, new.data)
#Sensitivity Plots
sensitivity.mnl <- function(model, attrib, base.data, competitor.data) {
# Function for creating data for a share-sensitivity chart
# model: mlogit object returned by mlogit() function
# attrib: list of vectors with attribute levels to be used in sensitivity
# base.data: data frame containing baseline design of target product
rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}# competitor.data: data frame containing design of competitive set
base.data <- expand.grid(attrib)[c(8), ]
competitor.data <- expand.grid(attrib)[c1(1, 3, 41, 49, 26), ]
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
competitor.data <- expand.grid(attrib)[c1(1, 3, 41, 49, 26), ]
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
sensitivity.mnl(m1, attrib, base.data, competitor.data)
base.data <- expand.grid(attrib)[c(8), ]
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
View(cbc.df)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
# interpreting the result
# WTP
coef(m3)["cargo3ft"]/(-coef(m3)["as.numeric(as.character(price))"]/1000)
# Predicting shares
predict.mnl <- function(model, data) {
# Function for predicting shares from a multinomial logit model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
# predict shares. Same format as the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility <- data.model%*%model$coef
share <- exp(utility)/sum(exp(utility))
cbind(share, data)
}
attrib <- list(seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
base.data <- expand.grid(attrib)[c(8), ]
View(base.data)
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
View(competitor.data)
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
#Sensitivity Plots
sensitivity.mnl <- function(model, attrib, base.data, competitor.data) {
# Function for creating data for a share-sensitivity chart
# model: mlogit object returned by mlogit() function
# attrib: list of vectors with attribute levels to be used in sensitivity
# base.data: data frame containing baseline design of target product
rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}# competitor.data: data frame containing design of competitive set
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
model <- m1
View(base.data)
rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for Baseline Product")
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for Baseline Product")
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
lrtest(m1,m2)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
# interpreting the result
# WTP
coef(m3)["cargo3ft"]/(-coef(m3)["as.numeric(as.character(price))"]/1000)
# Predicting shares
predict.mnl <- function(model, data) {
# Function for predicting shares from a multinomial logit model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
# predict shares. Same format as the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility <- data.model%*%model$coef
share <- exp(utility)/sum(exp(utility))
cbind(share, data)
}
attrib <- list(seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
# creat designs
new.data <- expand.grid(attrib)[c(8, 1, 3, 41, 49, 26), ]
# choose
predict.mnl(m3, new.data)
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
lrtest(m1,m2)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
lrtest(m1,m2)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
library(dplyr)
# survey based
cbc.df <- read.csv("http://goo.gl/5xQObB", colClasses = c(seat = "factor", price = "factor"))
summary(cbc.df)
# Inspecting Choice Data
xtabs(choice ~ price, data = cbc.df)
xtabs(choice ~ cargo  , data = cbc.df)
# fitting the model
library(mlogit)
cbc.mlogit <- mlogit.data(data=cbc.df, choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos",1:3),
id.var="resp.id")
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# test with intercept effect of position
m2 <- mlogit(choice ~ seat + cargo + eng + price, data = cbc.mlogit)
summary(m2)
lrtest(m1,m2)
# have price as a single parameter
m3 <- mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
# interpreting the result
# WTP
coef(m3)["cargo3ft"]/(-coef(m3)["as.numeric(as.character(price))"]/1000)
# Predicting shares
predict.mnl <- function(model, data) {
# Function for predicting shares from a multinomial logit model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
# predict shares. Same format as the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility <- data.model%*%model$coef
share <- exp(utility)/sum(exp(utility))
cbind(share, data)
}
attrib <- list(seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
# creat designs
new.data <- expand.grid(attrib)[c(8, 1, 3, 41, 49, 26), ]
# choose
predict.mnl(m3, new.data)
base.data <- expand.grid(attrib)[c(8), ]
View(attrib)
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
model <- m1
base.share <- predict.mnl(model, data)[1,1]
stripchart(base.share)
str(base.share)
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
share <- NULL
seq_along(attrib)
attrib[[1]])
attrib[[a]]
str(attrib)
data
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
View(data)
view(share)
str(share)
data[1,1]
data[1,]
base.data
unlist(attrib)
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
#Sensitivity Plots
sensitivity.mnl <- function(model, attrib, base.data, competitor.data) {
# Function for creating data for a share-sensitivity chart
# model: mlogit object returned by mlogit() function
# attrib: list of vectors with attribute levels to be used in sensitivity
# base.data: data frame containing baseline design of target product
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}# competitor.data: data frame containing design of competitive set
base.data <- expand.grid(attrib)[c(8), ]
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
View(tradeoff)
str(tradeoff)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for Baseline Product")
base.data <- expand.grid(attrib)[c(8), ]
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
base.share <- predict.mnl(model, data)[1,1]
View(base.data)
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
View(cbc.df)
# Planning the Sample Size for a Conjoint Study
small.cbc <- mlogit.data(data=cbc.df[1:(25*15*3),],choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos", 1:3),
id.var="resp.id")
# Planning the Sample Size for a Conjoint Study
library(mlogit)
small.cbc <- mlogit.data(data=cbc.df[1:(25*15*3),],choice="choice", shape="long",
varying=3:6, alt.levels=paste("pos", 1:3),
id.var="resp.id")
View(small.cbc)
m4 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = small.cbc)
View(m4)
summary(m4)
summary(m1)
cbind(predict.mnl(m4,new.data), predict.mnl(m1,new.data))
m1.rpar <- rep("n", length=length(m1$coef))
names(m1.rpar) <- names(m1$coef)
m1.rpar
m
m2.hier <- update(m1.hier, correlation = TRUE)
